
Business Example Problems and PseudoCode. 

We have not provided the Python Code, We leave this to the reader, but it will be very similar to the Python code in the book


1. Compare Revenue from Two Products
Problem: Compare revenue generated by two products and display the product names in ascending order of their revenue.

Pseudocode:
READ product1Name, product1Revenue
READ product2Name, product2Revenue

IF product1Revenue < product2Revenue THEN
    PRINT product1Name, product1Revenue, product2Name, product2Revenue
ELSE
    PRINT product2Name, product2Revenue, product1Name, product1Revenue
ENDIF

---

2. Calculate Total Sales for a Quarter
Problem: Calculate the total revenue and the number of transactions for the first quarter of the year from monthly sales data.

Pseudocode:
Set totalRevenue to 0
Set transactionCount to 0

FOR each month in ["January", "February", "March"]
    READ monthlyRevenue, monthlyTransactions
    Add monthlyRevenue to totalRevenue
    Add monthlyTransactions to transactionCount
END FOR

PRINT "Total Revenue:", totalRevenue
PRINT "Total Transactions:", transactionCount

---

3. Process Customer Payments Until Settlement
Problem: Process payments until the outstanding balance is fully settled or an overpayment is made.

Pseudocode:
Set outstandingBalance to 1000  # Example starting balance
Set totalPayments to 0

WHILE outstandingBalance > 0
    READ payment
    PRINT "Payment Received:", payment

    IF payment > outstandingBalance THEN
        PRINT "Overpayment of:", payment - outstandingBalance
        Set outstandingBalance to 0
    ELSE
        Subtract payment from outstandingBalance
    ENDIF

    Add payment to totalPayments
    PRINT "Remaining Balance:", outstandingBalance
END WHILE

PRINT "Total Payments:", totalPayments

---

4. Filter and List High-Value Customers
Problem: From a list of customers, print only those whose yearly spending exceeds $10,000.

Pseudocode:
FOR each customer in customerList
    READ customerName, yearlySpending

    IF yearlySpending > 10000 THEN
        PRINT customerName, yearlySpending
    ENDIF
END FOR

---

5. Generate a Report for Top Vendors
Problem: Generate a report listing vendors whose yearly orders exceed 1,000 and average order value exceeds $500. Include vendor name, yearly orders, and average order value.

Pseudocode:
FOR each vendor in vendorList
    READ vendorName, yearlyOrders, averageOrderValue

    IF yearlyOrders > 1000 AND averageOrderValue > 500 THEN
        PRINT vendorName, yearlyOrders, averageOrderValue
    ENDIF
END FOR

---

6. Count Approved Loan Applications
Problem: Count the total number of loan applications and the number of approved applications based on a credit score above 700.

Pseudocode:
Set totalApplications to 0
Set approvedApplications to 0

FOR each application in loanApplications
    READ applicantName, creditScore

    Increment totalApplications by 1

    IF creditScore > 700 THEN
        Increment approvedApplications by 1
        PRINT applicantName, creditScore, "Approved"
    ELSE
        PRINT applicantName, creditScore, "Rejected"
    ENDIF
END FOR

PRINT "Total Applications:", totalApplications
PRINT "Approved Applications:", approvedApplications

---

7. Categorize and Summarize Expenses
Problem: Categorize expenses by type (Travel, Supplies, Utilities, Miscellaneous), count the number of expenses in each category, and calculate total spending per category.

Pseudocode:
Set travelCount, suppliesCount, utilitiesCount, miscellaneousCount to 0
Set travelTotal, suppliesTotal, utilitiesTotal, miscellaneousTotal to 0

FOR each expense in expenseList
    READ expenseType, expenseAmount

    IF expenseType = "Travel" THEN
        Increment travelCount by 1
        Add expenseAmount to travelTotal
    ELSE IF expenseType = "Supplies" THEN
        Increment suppliesCount by 1
        Add expenseAmount to suppliesTotal
    ELSE IF expenseType = "Utilities" THEN
        Increment utilitiesCount by 1
        Add expenseAmount to utilitiesTotal
    ELSE
        Increment miscellaneousCount by 1
        Add expenseAmount to miscellaneousTotal
    ENDIF
END FOR

PRINT "Travel: Count =", travelCount, "Total =", travelTotal
PRINT "Supplies: Count =", suppliesCount, "Total =", suppliesTotal
PRINT "Utilities: Count =", utilitiesCount, "Total =", utilitiesTotal
PRINT "Miscellaneous: Count =", miscellaneousCount, "Total =", miscellaneousTotal

---

8. Calculate Payroll with Bonuses
Problem: Calculate payroll for employees, applying bonuses based on their job level. Senior-level employees receive a 15% bonus, mid-level 10%, and junior-level 5%.

Pseudocode:
FOR each employee in employeeList
    READ employeeName, baseSalary, jobLevel

    IF jobLevel = "Senior" THEN
        Set bonus to baseSalary * 0.15
    ELSE IF jobLevel = "Mid" THEN
        Set bonus to baseSalary * 0.10
    ELSE IF jobLevel = "Junior" THEN
        Set bonus to baseSalary * 0.05
    ELSE
        Set bonus to 0
    ENDIF

    Set totalPay to baseSalary + bonus
    PRINT employeeName, "Base Salary:", baseSalary, "Bonus:", bonus, "Total Pay:", totalPay
END FOR

---

9. Calculate Average Sales and Count Below-Average Sales
Problem: Calculate the average daily sales for a product and count the number of days with below-average sales using functions.

Pseudocode:
FUNCTION calculateAverage(sales)
    Set total to 0
    FOR each sale in sales
        Add sale to total
    END FOR
    RETURN total / len(sales)
END FUNCTION

FUNCTION countBelowAverage(sales, average)
    Set belowCount to 0
    FOR each sale in sales
        IF sale < average THEN
            Increment belowCount by 1
        ENDIF
    END FOR
    RETURN belowCount
END FUNCTION

MAIN PROGRAM
Set dailySales to an empty list
Print "Enter daily sales for the month (-1 to end):"

WHILE True
    Input sale
    IF sale = -1 THEN
        BREAK
    ENDIF
    Add sale to dailySales
END WHILE

IF len(dailySales) = 0 THEN
    Print "No sales data entered. Exiting program."
    EXIT
ENDIF

Set averageSales to calculateAverage(dailySales)
Set belowAverageDays to countBelowAverage(dailySales, averageSales)

Print "Average Sales:", averageSales
Print "Number of days with below-average sales:", belowAverageDays
END MAIN PROGRAM
